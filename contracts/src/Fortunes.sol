// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {Owned} from "solmate/auth/Owned.sol";
import {ERC20} from "solmate/tokens/ERC20.sol";
import {VRFConsumerBaseV2} from "./chainlink/VRFConsumerBaseV2.sol";
import {VRFCoordinatorV2Interface} from "./chainlink/VRFCoordinatorV2Interface.sol";
import {Owned} from "solmate/auth/Owned.sol";
import {IStakedAvax} from "./benqi/IStakedAvax.sol";
import {ReentrancyGuard} from "solmate/utils/ReentrancyGuard.sol";

contract Fortunes is VRFConsumerBaseV2, Owned, ReentrancyGuard {
    /**

		8888888888               888                              d8b             8888888b.          888 888		   _______
		888                      888                              88P             888   Y88b         888 888		  /\ o o o\
		888                      888                              8P              888    888         888 888		 /o \ o o o\_______
		8888888  .d88b.  888d888 888888 888  888 88888b.   .d88b. "  .d8888b      888   d88P .d88b.  888 888		<    >------>   o /|
		888     d88""88b 888P"   888    888  888 888 "88b d8P  Y8b   88K          8888888P" d88""88b 888 888		 \ o/  o   /_____/o|
		888     888  888 888     888    888  888 888  888 88888888   "Y8888b.     888 T88b  888  888 888 888		  \/______/     |oo|
		888     Y88..88P 888     Y88b.  Y88b 888 888  888 Y8b.            X88     888  T88b Y88..88P 888 888		        |   o   |o/
		888      "Y88P"  888      "Y888  "Y88888 888  888  "Y8888     88888P'     888   T88b "Y88P"  888 888		        |_______|/

		Fortune's Roll is a game of chance where players deposit funds and roll a dice to increase their fortune.
		At the end of the game, players can redeem their fortunes for a share of the total yield generated by deposits throughout the game.

		# Contract Structure:

		## Events
		1. FortuneGained - emitted when a player gains fortune. ðŸ§ª
		2. FortuneLost - emitted when a player loses fortune. ðŸ§ª
		3. Deposit - emitted when a player deposits funds. ðŸ§ª
		4a. Withdraw - emitted when a player withdraws funds. ðŸ§ª
		4b. Forfeit - emitted when a player forfeits their funds. ðŸ§ª
		4c. Redeem - emitted when a player redeems their funds. ðŸ§ª
		5. DiceRolled - emitted when a player rolls the dice. ðŸ§ª
		6. DiceLanded - emitted when the dice lands. ðŸ§ª
		7. GrabbeningClosed - emitted when a grabbening is closed. ðŸ§ª

		## Methods

		### Deposits and withdrawals
		1. Deposit at any time ðŸ§ª
		2. Withdraw before game starts ðŸ§ª
		3. Forfeit while game is running ðŸ§ª
		4. Redeem after end of game ðŸ§ª

		### User Game functions
		1. Roll For Add ðŸ§ª
		2. Roll For Multiply ðŸ§ª
		3. Roll For Grabbening ðŸ§ª
		4. Close current Grabbening - Closes the current open grabbening to continue to the next one ðŸ§ª

		### Chainlink VRF functions
		1. FulfillRandomness - generates a new dice roll for a user ðŸ§ª

		### Admin Game functions
		1. Set grabbening ðŸ§ª
		2. Reclaim LINK tokens ðŸ§ª
		3. Claim protocol share ðŸ§ª

		### View/Helper functions
		1. Calculate Dice Rolls ðŸ§ª
		2. Calculate Rewards ðŸ§ª
		3. Calculate Grabbening Rewards ðŸ§ª
		4. Get Total Fortune For ðŸ§ª

		## Mapping & Variables

		### Bookkeeping
		1. Fortunes - a mapping of addresses to their fortunes. âœ…
		2. Deposits - a mapping of addresses to their deposits. âœ…
		3. Vault - fortunes lost by players accumulate here. âœ…
		4. Total Fortune - total fortune of all players. âœ…
		5. Total Deposited - total deposits of all players. âœ…
		6. Grabbening Index - the index of the current open grabbening. âœ…
		7. Rolling Dice - a mapping of request ids to rolling dice. âœ…
		8. Total Protocol Rewards - total protocol rewards. âœ…

		### Parameters
		1. Dice roll generation rate - how often to generate a new dice roll. âœ…
		2. Addition multiplier - how much to multiply the dice roll by when adding. âœ…
		3. Multiplication multiplier - how much to multiply the dice roll by when multiplying. âœ…
		4. Minimum fortune to roll grabbening - how much fortune a player must have to roll for grabbening. âœ…
		5. Game start - when the game starts. âœ…
		6. Game end - when the game ends. âœ…
	 */

    /* -------------------------------------------------------------------------- */
    /*                                   Events                                   */
    /* -------------------------------------------------------------------------- */

    event FortuneGained(
        address indexed player,
        uint256 fortuneGained,
        uint256 timestamp
    );
    event FortuneLost(
        address indexed player,
        uint256 fortuneLost,
        uint256 timestamp
    );
    event Deposit(address indexed player, uint256 amount, uint256 timestamp);
    event Withdraw(
        address indexed player,
        uint256 amount,
        bytes32 kind,
        uint256 timestamp
    );
    event DiceRolled(
        address indexed player,
        RollAction action,
        uint256 multiplyStake,
        uint256 grabbeningIndex,
        uint256 requestId,
        uint256 timestamp
    );
    event DiceLanded(
        address indexed player,
        RollAction action,
        uint256 multiplyStake,
        uint256 grabbeningIndex,
        uint256 requestId,
        uint256 diceRoll,
        uint256 timestamp
    );
    event GrabbeningClosed(
        uint256 grabbeningIndex,
        uint256 potBalance,
        uint256 totalRewards,
        uint256 timestamp
    );

    /* -------------------------------------------------------------------------- */
    /*                            Mappings & Variables                            */
    /* -------------------------------------------------------------------------- */

    uint8 private constant DICE_SIDES = 12;
    uint256 private constant PRECISION = 1e6;
    uint256 private constant PROTOCOL_SHARE = 50000; // 5% of generated yield goes to protocol

    bytes32 public constant WITHDRAW = keccak256(abi.encodePacked("withdraw"));
    bytes32 public constant FORFEIT = keccak256(abi.encodePacked("forfeit"));
    bytes32 public constant REDEEM = keccak256(abi.encodePacked("redeem"));

    struct Player {
        uint256 fortune;
        uint256 deposit;
        uint256 diceRollsRemaining;
        uint256 lastDiceRollTimestamp;
    }

    struct Grabbening {
        uint256 start;
        uint256 end;
        uint256 fee;
        uint256[DICE_SIDES] rewardShares; // denominated in PRECISION e.g 50% = 0.5 * PRECISION. Total should never exceed 1 * PRECISION
        uint256[DICE_SIDES] grabberTallies; // number of players who rolled each side
        uint256 rewardSharesTotal;
        mapping(address => uint256) rolls;
        uint256 rewardsSnapshot;
    }

    struct RollingDice {
        uint256 requestId;
        address player;
        uint256 multiplyStake;
        uint256 grabbeningIndex;
        RollAction action;
    }

    enum RollAction {
        Add,
        Multiply,
        Grab
    }

    // Chainlink VRF
    VRFCoordinatorV2Interface COORDINATOR;
    bytes32 private KEY_HASH;
    uint64 private SUBSCRIPTION_ID;

    // sAVAX
    IStakedAvax public STAKED_AVAX;

    // LINK
    ERC20 public LINK_TOKEN;

    uint256 public gameStart;
    uint256 public gameEnd;
    uint256 public potBalance;
    uint256 public totalFortune;
    uint256 public totalDeposited;
    uint256 public grabbeningIndex;
    uint256 public totalProtocolRewards;
    uint256 public outstandingRolls;

    uint256 public diceRollGenerationRate;
    uint256 public diceRateDepositFactor; // how much to multiply the dice roll generation rate by based on deposit size. Must be in same precision as native token (e.g. 1e18 for AVAX)
    uint256 public additionMultiplier;
    uint256 public minimumFortuneToRollGrab;

    mapping(uint256 => Grabbening) public grabbenings;
    mapping(address => Player) public players;
    mapping(uint256 => RollingDice) public rollingDie;

    /* -------------------------------------------------------------------------- */
    /*                                 Constructor                                */
    /* -------------------------------------------------------------------------- */

    constructor(
        address _owner,
        address _vrfCoordinator,
        address payable _stakedAvax,
        address _linkToken,
        uint256 _gameStart,
        uint256 _gameEnd,
        uint256 _diceRollGenerationRate,
        uint256 _diceRateDepositFactor,
        uint256 _additionMultiplier,
        uint256 _minimumFortuneToRollGrab,
        bytes32 keyHash,
        uint64 subscriptionId
    ) VRFConsumerBaseV2(_vrfCoordinator) Owned(_owner) {
        COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);
        KEY_HASH = keyHash;
        SUBSCRIPTION_ID = subscriptionId;

        STAKED_AVAX = IStakedAvax(_stakedAvax);

        LINK_TOKEN = ERC20(_linkToken);

        gameStart = _gameStart;
        gameEnd = _gameEnd;
        diceRollGenerationRate = _diceRollGenerationRate;
        diceRateDepositFactor = _diceRateDepositFactor;
        additionMultiplier = _additionMultiplier;
        minimumFortuneToRollGrab = _minimumFortuneToRollGrab;
    }

    /* -------------------------------------------------------------------------- */
    /*                              Public Functions                              */
    /* -------------------------------------------------------------------------- */

    function deposit(uint256 shareAmount) external {
        require(shareAmount > 0, "Must deposit more than 0");

        Player storage player = players[msg.sender];

        updateDiceRolls(player);

        uint256 underlyingAmount = STAKED_AVAX.getPooledAvaxByShares(
            shareAmount
        );

        player.deposit += underlyingAmount;
        totalDeposited += underlyingAmount;

        STAKED_AVAX.transferFrom(msg.sender, address(this), shareAmount);

        emit Deposit(msg.sender, shareAmount, block.timestamp);
    }

    function withdraw() public nonReentrant {
        require(block.timestamp < gameStart, "Must be before game start");

        Player storage player = players[msg.sender];

        require(player.deposit > 0, "Must have a deposit");

        uint256 deposited = player.deposit;

        totalDeposited -= deposited;
        player.deposit = 0;

        uint256 amount = STAKED_AVAX.getSharesByPooledAvax(deposited);

        require(
            amount <= STAKED_AVAX.balanceOf(address(this)),
            "Not enough shares to withdraw"
        );

        STAKED_AVAX.transfer(msg.sender, amount);

        emit Withdraw(msg.sender, amount, WITHDRAW, block.timestamp);
    }

    function forfeit() external nonReentrant {
        require(
            block.timestamp >= gameStart && block.timestamp <= gameEnd,
            "Must be during game"
        );

        Player storage player = players[msg.sender];

        require(player.deposit > 0, "Must have a deposit");

        uint256 deposited = player.deposit;
        uint256 fortune = getTotalFortuneFor(msg.sender, player);

        potBalance += fortune;
        totalFortune -= fortune;
        totalDeposited -= deposited;

        delete players[msg.sender];

        uint256 amount = STAKED_AVAX.getSharesByPooledAvax(deposited);

        require(
            amount <= STAKED_AVAX.balanceOf(address(this)),
            "Not enough shares to withdraw"
        );

        STAKED_AVAX.transfer(msg.sender, amount);

        emit Withdraw(msg.sender, amount, FORFEIT, block.timestamp);
        emit FortuneLost(msg.sender, fortune, block.timestamp);
    }

    function redeem() external nonReentrant {
        require(block.timestamp >= gameEnd, "Must be after game has ended");
        require(outstandingRolls == 0, "Must have no outstanding rolls");

        Player storage player = players[msg.sender];

        require(player.deposit > 0, "Must have deposited");

        (uint256 playerReward, uint256 protocolReward) = calculateRewardFor(
            msg.sender,
            player
        );
        playerReward += STAKED_AVAX.getSharesByPooledAvax(player.deposit);

        totalDeposited -= player.deposit;
        totalFortune -= player.fortune;

        totalProtocolRewards += protocolReward;

        delete players[msg.sender];

        STAKED_AVAX.transfer(msg.sender, playerReward);

        emit Withdraw(msg.sender, playerReward, REDEEM, block.timestamp);
        emit FortuneLost(msg.sender, player.fortune, block.timestamp);
    }

    function rollAdd() external returns (uint256) {
        Player storage player = players[msg.sender];

        uint256 requestId = rollDice(player);

        rollingDie[requestId] = RollingDice({
            requestId: requestId,
            player: msg.sender,
            action: RollAction.Add,
            multiplyStake: 0,
            grabbeningIndex: 0
        });

        emit DiceRolled(
            msg.sender,
            RollAction.Add,
            0,
            0,
            requestId,
            block.timestamp
        );

        return requestId;
    }

    function rollMultiply(uint256 stake) external returns (uint256) {
        uint256 stakeModulus = (stake % DICE_SIDES) + 1;

        Player storage player = players[msg.sender];

        uint256 requestId = rollDice(player);

        rollingDie[requestId] = RollingDice({
            requestId: requestId,
            player: msg.sender,
            action: RollAction.Multiply,
            multiplyStake: stakeModulus,
            grabbeningIndex: 0
        });

        emit DiceRolled(
            msg.sender,
            RollAction.Multiply,
            stakeModulus,
            0,
            requestId,
            block.timestamp
        );

        return requestId;
    }

    function rollGrab() external returns (uint256) {
        Grabbening storage grabbening = grabbenings[grabbeningIndex];
        require(
            block.timestamp >= grabbening.start &&
                block.timestamp <= grabbening.end,
            "Must be during open grabbening"
        );

        Player storage player = players[msg.sender];

        require(
            player.fortune >= minimumFortuneToRollGrab,
            "Must have enough fortune to roll grabbening"
        );

        uint256 fee = (player.fortune * grabbening.fee) / PRECISION;

        player.fortune -= fee;
        totalFortune -= fee;
        potBalance += fee;

        uint256 requestId = rollDice(player);

        rollingDie[requestId] = RollingDice({
            requestId: requestId,
            player: msg.sender,
            action: RollAction.Grab,
            multiplyStake: 0,
            grabbeningIndex: grabbeningIndex
        });

        emit DiceRolled(
            msg.sender,
            RollAction.Grab,
            0,
            grabbeningIndex,
            requestId,
            block.timestamp
        );

        return requestId;
    }

    function closeCurrentGrabbening() external {
        Grabbening storage grabbening = grabbenings[grabbeningIndex];

        require(grabbening.start > 0, "Must have started grabbening");
        require(
            block.timestamp > grabbening.end,
            "Must be after grabbening end"
        );

        uint totalRewards = 0;

        for (uint256 i = 0; i < DICE_SIDES; i++) {
            totalRewards +=
                (grabbening.rewardShares[i] * potBalance) /
                PRECISION;
        }

        grabbening.rewardsSnapshot = totalRewards;
        potBalance -= totalRewards;
        totalFortune += totalRewards;

        emit GrabbeningClosed(
            grabbeningIndex,
            potBalance,
            totalRewards,
            block.timestamp
        );

        grabbeningIndex += 1;
    }

    function calculateGrabbeningRewards(
        address player
    ) public view returns (uint256) {
        uint256 grabbeningRewards = 0;

        for (uint256 i = 0; i < grabbeningIndex; i++) {
            Grabbening storage grabbening = grabbenings[i];

            uint256 roll = grabbening.rolls[player];

            if (roll == 0) {
                continue;
            }

            uint256 rollRewardShare = grabbening.rewardShares[roll - 1];

            uint256 rollReward = (rollRewardShare *
                grabbening.rewardsSnapshot) / grabbening.rewardSharesTotal;

            grabbeningRewards +=
                rollReward /
                grabbening.grabberTallies[roll - 1];
        }

        return grabbeningRewards;
    }

    /* -------------------------------------------------------------------------- */
    /*                               Admin Functions                              */
    /* -------------------------------------------------------------------------- */

    function setGrabbening(
        uint256 index,
        uint256 start,
        uint256 end,
        uint256 fee,
        uint256[] calldata rewardShares
    ) external onlyOwner {
        require(gameStart > 0, "Must have game start time");
        require(start > 0, "Must have start time");

        Grabbening storage grabbening = grabbenings[index];

        require(grabbening.start == 0, "Grabbening already exists");
        require(end > start, "Must have end time");
        require(fee > 0, "Must have fee");
        require(rewardShares.length == DICE_SIDES, "Must have rewards");

        uint256[DICE_SIDES] memory rewardSharesCopy;

        for (uint256 i = 0; i < DICE_SIDES; i++) {
            rewardSharesCopy[i] = rewardShares[i];
        }

        grabbening.start = start;
        grabbening.end = end;
        grabbening.fee = fee;
        grabbening.rewardShares = rewardSharesCopy;

        for (uint256 i = 0; i < DICE_SIDES; i++) {
            grabbening.rewardSharesTotal += rewardShares[i];
        }
    }

    function reclaimLinkTokens() external onlyOwner {
        LINK_TOKEN.transfer(msg.sender, LINK_TOKEN.balanceOf(address(this)));
    }

    function claimProtocolRewards() external onlyOwner {
        uint256 amount = totalProtocolRewards;

        totalProtocolRewards = 0;

        STAKED_AVAX.transfer(msg.sender, amount);
    }

    /* -------------------------------------------------------------------------- */
    /*                             Internal Functions                             */
    /* -------------------------------------------------------------------------- */

    function getTotalFortuneFor(
        address playerAddress,
        Player storage player
    ) internal view returns (uint256) {
        return player.fortune + calculateGrabbeningRewards(playerAddress);
    }

    function updateDiceRolls(Player storage player) internal returns (uint256) {
        if (block.timestamp < gameStart) {
            return 0;
        }

        if (player.lastDiceRollTimestamp == 0) {
            player.lastDiceRollTimestamp = gameStart;
        }

        uint256 timeSinceLastDiceRoll = block.timestamp -
            player.lastDiceRollTimestamp;
        uint256 newDiceRolls = (timeSinceLastDiceRoll *
            diceRollGenerationRate *
            player.deposit) / diceRateDepositFactor;

        player.diceRollsRemaining += newDiceRolls;
        player.lastDiceRollTimestamp = block.timestamp;

        return player.diceRollsRemaining;
    }

    function calculateRewardFor(
        address playerAddress,
        Player storage player
    ) internal view returns (uint256, uint256) {
        uint256 totalRewards = STAKED_AVAX.balanceOf(address(this)) -
            STAKED_AVAX.getSharesByPooledAvax(totalDeposited);

        uint256 playerFortune = getTotalFortuneFor(playerAddress, player);

        if (totalFortune == 0) {
            return (0, 0);
        }
				
        uint256 playerReward = (totalRewards * playerFortune) / totalFortune;
        uint256 protocolReward = (playerReward * PROTOCOL_SHARE) / PRECISION;

        return (playerReward - protocolReward, protocolReward);
    }

    function rollDice(Player storage player) internal returns (uint256) {
        require(player.deposit > 0, "Must have a deposit");
        require(
            block.timestamp >= gameStart && block.timestamp <= gameEnd,
            "Must be during game"
        );

        updateDiceRolls(player);

        require(
            player.diceRollsRemaining >= 1 * PRECISION,
            "Must have dice rolls remaining"
        );

        outstandingRolls += 1;

        player.diceRollsRemaining -= (1 * PRECISION);

        uint256 requestId = COORDINATOR.requestRandomWords(
            KEY_HASH,
            SUBSCRIPTION_ID,
            3,
            100_000,
            1
        );

        return requestId;
    }

    function finalizeAddRoll(uint256 diceRoll, Player storage player) internal {
        uint256 fortuneRewards = diceRoll * additionMultiplier;
        player.fortune += fortuneRewards;
        totalFortune += fortuneRewards;
    }

    function finalizeMultiplyRoll(
        uint256 diceRoll,
        Player storage player,
        uint256 stake
    ) internal {
        bool isWin = diceRoll >= stake;

        uint256 fortuneRewards = (player.fortune * stake) / DICE_SIDES;

        if (isWin) {
            player.fortune += fortuneRewards;
            totalFortune += fortuneRewards;
        } else {
            player.fortune -= fortuneRewards;
            totalFortune -= fortuneRewards;
            potBalance += fortuneRewards;
        }
    }

    function finalizeGrabRoll(
        uint256 diceRoll,
        RollingDice storage rollingDice
    ) internal {
        uint256 prevRoll = grabbenings[rollingDice.grabbeningIndex].rolls[
            rollingDice.player
        ];

        if (prevRoll > 0) {
            grabbenings[rollingDice.grabbeningIndex].grabberTallies[
                prevRoll - 1
            ] -= 1;
        }

        grabbenings[rollingDice.grabbeningIndex].grabberTallies[
            diceRoll - 1
        ] += 1;

        grabbenings[rollingDice.grabbeningIndex].rolls[
            rollingDice.player
        ] = diceRoll;
    }

    function fulfillRandomWords(
        uint256 requestId,
        uint256[] memory randomWords
    ) internal override {
        RollingDice storage rollingDice = rollingDie[requestId];
        Player storage player = players[rollingDice.player];

        uint256 diceRoll = (randomWords[0] % DICE_SIDES) + 1;

        if (rollingDice.action == RollAction.Add) {
            finalizeAddRoll(diceRoll, player);
        } else if (rollingDice.action == RollAction.Multiply) {
            finalizeMultiplyRoll(diceRoll, player, rollingDice.multiplyStake);
        } else if (rollingDice.action == RollAction.Grab) {
            finalizeGrabRoll(diceRoll, rollingDice);
        } else {
            revert("Invalid roll action");
        }

        delete rollingDie[requestId];

        outstandingRolls -= 1;

        emit DiceLanded(
            rollingDice.player,
            rollingDice.action,
            rollingDice.multiplyStake,
            rollingDice.grabbeningIndex,
            requestId,
            diceRoll,
            block.timestamp
        );
    }
}
